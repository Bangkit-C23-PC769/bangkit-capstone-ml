# -*- coding: utf-8 -*-
"""TFRS-Capstone

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I_ZvHKuviYhy3T9-hS6ASFtPOa5afumj
"""

!pip install numpy pandas tensorflow

import numpy as np
import pandas as pd

# Sample dataset
data = pd.read_excel('/content/DATASET-STASIUN (1).xlsx')

df = pd.DataFrame(data)

df

from sklearn.preprocessing import LabelEncoder

# Encode populasi and name IDs
populasi_encoder = LabelEncoder()
name_encoder = LabelEncoder()

df['POPULASI KECAMATAN'] = populasi_encoder.fit_transform(df['POPULASI KECAMATAN'])
df['NAME'] = name_encoder.fit_transform(df['NAME'])

num_populasis = len(populasi_encoder.classes_)
num_names = len(name_encoder.classes_)

import tensorflow as tf
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, Embedding, Dot, Flatten

# Define model architecture
populasi_input = Input(shape=(1,))
name_input = Input(shape=(1,))

populasi_embedding = Embedding(num_populasis, 10)(populasi_input)
name_embedding = Embedding(num_names, 10)(name_input)

populasi_vec = Flatten()(populasi_embedding)
name_vec = Flatten()(name_embedding)

dot_product = Dot(axes=1)([populasi_vec, name_vec])

model = Model(inputs=[populasi_input, name_input], outputs=dot_product)
model.compile(loss='mse', optimizer='adam')

# Train the model
POPULASI_KECAMATANs = df['POPULASI KECAMATAN'].values
NAMEs = df['NAME'].values
ratings = df['POPULASI KECAMATAN'].values

model.fit([POPULASI_KECAMATANs, NAMEs], ratings, epochs=10, batch_size=2)

# Make predictions
NAME = np.array([0])
POPULASI_KECAMATAN = np.array([1])

prediction = model.predict([NAME, POPULASI_KECAMATAN])
print(f"Predicted rating for Station Name and Population: {prediction[0][0]}")

# Generate recommendations for a populasi
NAME = np.array([0])  # populasi1
POPULASI_KECAMATANs = np.arange(num_names)  # All names


NAMEs = np.repeat(NAME, num_names)
predictions = model.predict([NAMEs, POPULASI_KECAMATANs])

sorted_indices = np.argsort(predictions, axis=0)[::-1].flatten()

top_n = 3
recommended_names = name_encoder.inverse_transform(sorted_indices[:top_n])

print(f"Top {top_n} name recommendations for populasi1:")
for name in recommended_names:
    print(name)

# Save the model
model.save('recommender_model.h5')